#!/usr/bin/env python
"""
Provides a VulnerabilityCase object for the Vultron ActivityStreams Vocabulary.
"""
#  Copyright (c) 2023-2025 Carnegie Mellon University and Contributors.
#  - see Contributors.md for a full list of Contributors
#  - see ContributionInstructions.md for information on how you can Contribute to this project
#  Vultron Multiparty Coordinated Vulnerability Disclosure Protocol Prototype is
#  licensed under a MIT (SEI)-style license, please see LICENSE.md distributed
#  with this Software or contact permission@sei.cmu.edu for full terms.
#  Created, in part, with funding and support from the United States Government
#  (see Acknowledgments file). This program may include and/or can make use of
#  certain third party source code, object code, documentation and other files
#  (“Third Party Software”). See LICENSE.md for more details.
#  Carnegie Mellon®, CERT® and CERT Coordination Center® are registered in the
#  U.S. Patent and Trademark Office by Carnegie Mellon University

from typing import TypeAlias

from pydantic import Field, model_validator

from vultron.as_vocab.base import activitystreams_object
from vultron.as_vocab.base.links import ActivityStreamRef
from vultron.as_vocab.base.objects.activities.base import as_Activity
from vultron.as_vocab.objects.base import VultronObject
from vultron.as_vocab.objects.case_participant import CaseParticipantRef
from vultron.as_vocab.objects.case_status import CaseStatusRef, CaseStatus
from vultron.as_vocab.objects.embargo_event import EmbargoEventRef
from vultron.as_vocab.objects.vulnerability_report import VulnerabilityReportRef
from vultron.bt.embargo_management.states import EM


def init_case_status():
    return [
        CaseStatus(),
    ]


@activitystreams_object
class VulnerabilityCase(VultronObject):
    """
    A Vulnerability Case is a container for vulnerability reports, and is used to track the
    lifecycle of the case and its constituent vulnerability reports, including the status of the case itself,
    the participants in the case, and the embargo status of the case.
    """

    case_participants: list[CaseParticipantRef] = Field(default_factory=list)
    vulnerability_reports: list[VulnerabilityReportRef] = Field(default_factory=list)
    case_status: list[CaseStatusRef] = Field(default_factory=init_case_status)

    # don't excludeIfNone here to make it explicit when there is no embargo
    active_embargo: EmbargoEventRef = None

    proposed_embargoes: list[EmbargoEventRef] = Field(default_factory=list)

    case_activity: list[as_Activity] = Field(default_factory=list)

    # case relationships
    parent_cases: list["VulnerabilityCaseRef"] = Field(default_factory=list)
    child_cases: list["VulnerabilityCaseRef"] = Field(default_factory=list)
    sibling_cases: list["VulnerabilityCaseRef"] = Field(default_factory=list)

    @model_validator(mode="after")
    def set_cs_context(self):
        # set the context of the case status objects to the case id
        for cs in self.case_status:
            cs.context = self.as_id
        return self

    def add_report(self, report: VulnerabilityReportRef) -> None:
        """Add a vulnerability report to the case

        Args:
            report: a VulnerabilityReport object
        """
        self.vulnerability_reports.append(report)

    def add_participant(self, participant: CaseParticipantRef) -> None:
        """Add a participant to the case

        Args:
            participant: a CaseParticipant object
        """
        self.case_participants.append(participant)

    def set_embargo(self, embargo: EmbargoEventRef) -> None:
        """Set the active embargo for the case

        Args:
            embargo: an EmbargoEvent object
        """
        self.active_embargo = embargo
        self.case_status.em_state = EM.ACTIVE

    def record_activity(self, activity: as_Activity) -> None:
        """Record an activity in the case

        Args:
            activity: an as_Activity object

        """
        ids = set([a.as_id for a in self.case_activity])
        if activity.as_id not in ids:
            self.case_activity.append(activity)


VulnerabilityCaseRef: TypeAlias = ActivityStreamRef[VulnerabilityCase]


def main():
    obj = VulnerabilityCase()
    _json = obj.to_json(indent=2)
    print(_json)
    with open("../../../doc/examples/vulnerability_case.json", "w") as fp:
        fp.write(_json)


if __name__ == "__main__":
    main()
