#  Copyright (c) 2023-2024 Carnegie Mellon University and Contributors.
#  - see Contributors.md for a full list of Contributors
#  - see ContributionInstructions.md for information on how you can Contribute to this project
#  Vultron Multiparty Coordinated Vulnerability Disclosure Protocol Prototype is
#  licensed under a MIT (SEI)-style license, please see LICENSE.md distributed
#  with this Software or contact permission@sei.cmu.edu for full terms.
#  Created, in part, with funding and support from the United States Government
#  (see Acknowledgments file). This program may include and/or can make use of
#  certain third party source code, object code, documentation and other files
#  (“Third Party Software”). See LICENSE.md for more details.
#  Carnegie Mellon®, CERT® and CERT Coordination Center® are registered in the
#  U.S. Patent and Trademark Office by Carnegie Mellon University

import unittest
from datetime import datetime

import vultron.as_vocab.objects.vulnerability_report as vr


class MyTestCase(unittest.TestCase):
    def setUp(self):
        self.rpt = vr.VulnerabilityReport(
            attributed_to=[
                "Henry",
            ],
            content="There's a hole in the bucket.",
            name="SS-7-1975",
            published=datetime.now(),
        )

        pass

    def tearDown(self):
        pass

    def test_vulnerability_report(self):
        rpt = self.rpt

        print(rpt.to_json(indent=2))

        self.assertIn("Henry", rpt.attributed_to)
        self.assertEqual("There's a hole in the bucket.", rpt.content)
        self.assertEqual("SS-7-1975", rpt.name)
        self.assertIsInstance(rpt.published, datetime)

        print(dir(rpt))


if __name__ == "__main__":
    unittest.main()
